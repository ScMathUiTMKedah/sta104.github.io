# Example of categorical data
gender <- c("Male", "Female", "Male", "Male", "Female")
table(gender)
# Example of numerical data
age <- c(25, 30, 35, 40, 45)
summary(age)
# Creating a simple relational database
library(DBI)
install.packages("DBI")
# Creating a simple relational database
library(DBI)
con <- dbConnect(RSQLite::SQLite(), ":memory:")
install.packages("RSQLite")
# Creating a simple relational database
library(DBI)
con <- dbConnect(RSQLite::SQLite(), ":memory:")
dbWriteTable(con, "Employees", data.frame(ID = 1:3, Name = c("John", "Emily", "Michael")))
dbWriteTable(con, "Departments", data.frame(ID = c(1, 2), Department = c("HR", "Finance")))
dbListTables(con)
View(con)
# Load the ggplot2 package
library(ggplot2)
install.packages("ggplot2")
# Sample data
data <- data.frame(
Category = c("Category A", "Category B", "Category C", "Category D"),
Value = c(25, 35, 20, 30)
)
# Create pie chart
pie_chart <- ggplot(data, aes(x = "", y = Value, fill = Category)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y") +   # Convert to polar coordinates (pie chart)
labs(title = "Pie Chart Example") +
theme_void()         # Remove background and grid lines
# Load the ggplot2 package
library(ggplot2)
# Sample data
data <- data.frame(
Category = c("Category A", "Category B", "Category C", "Category D"),
Value = c(25, 35, 20, 30)
)
# Create pie chart
pie_chart <- ggplot(data, aes(x = "", y = Value, fill = Category)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y") +   # Convert to polar coordinates (pie chart)
labs(title = "Pie Chart Example") +
theme_void()         # Remove background and grid lines
# Display pie chart
print(pie_chart)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
# Load the ggplot2 package
library(ggplot2)
# Sample data
data <- data.frame(
Category = c("Category A", "Category B", "Category C", "Category D"),
Value = c(25, 35, 20, 30)
)
# Create pie chart
pie_chart <- ggplot(data, aes(x = "", y = Value, fill = Category)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y") +   # Convert to polar coordinates (pie chart)
labs(title = "Pie Chart Example") +
theme_void()         # Remove background and grid lines
# Display pie chart
print(pie_chart)
# Load the ggplot2 package
library(ggplot2)
# Sample data
data <- data.frame(
Group = c("Group 1", "Group 2", "Group 3"),
Value1 = c(10, 15, 20),
Value2 = c(15, 20, 25),
Value3 = c(20, 25, 30)
)
# Reshape data for clustered and stacked bar charts
data_long <- tidyr::gather(data, key = "Category", value = "Value", -Group)
# Simple Bar Chart
simple_bar <- ggplot(data_long, aes(x = Group, y = Value, fill = Category)) +
geom_bar(stat = "identity", position = "identity") +
labs(title = "Simple Bar Chart", x = "Group", y = "Value") +
theme_minimal()
# Clustered Bar Chart
clustered_bar <- ggplot(data_long, aes(x = Group, y = Value, fill = Category)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Clustered Bar Chart", x = "Group", y = "Value") +
theme_minimal()
# Stacked Bar Chart
stacked_bar <- ggplot(data_long, aes(x = Group, y = Value, fill = Category)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Stacked Bar Chart", x = "Group", y = "Value") +
theme_minimal()
# Display the plots
print(simple_bar)
print(clustered_bar)
print(stacked_bar)
# Load the ggplot2 package
library(ggplot2)
# Sample data
data <- data.frame(
Category = c("Category A", "Category B", "Category C", "Category D"),
Value = c(25, 35, 20, 30)
)
# Calculate percentages
data$Percentage <- round((data$Value / sum(data$Value)) * 100, 1)
# Create pie chart
pie_chart <- ggplot(data, aes(x = "", y = Value, fill = Category)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y") +   # Convert to polar coordinates (pie chart)
labs(title = "Pie Chart Example") +
theme_void() +         # Remove background and grid lines
geom_text(aes(label = paste0(Category, "\n", Percentage, "%")),
position = position_stack(vjust = 0.5))
# Display pie chart
print(pie_chart)
# Load the ggplot2 package
library(ggplot2)
# Sample data
data <- data.frame(
Group = c("Group 1", "Group 2", "Group 3"),
Value1 = c(10, 15, 20),
Value2 = c(15, 20, 25),
Value3 = c(20, 25, 30)
)
# Reshape data for clustered and stacked bar charts
data_long <- tidyr::gather(data, key = "Category", value = "Value", -Group)
# Calculate percentages
data_long$Percentage <- round((data_long$Value / sum(data_long$Value)) * 100, 1)
# Simple Bar Chart
simple_bar <- ggplot(data_long, aes(x = Group, y = Value, fill = Category)) +
geom_bar(stat = "identity") +
labs(title = "Simple Bar Chart", x = "Group", y = "Value") +
theme_minimal() +
geom_text(aes(label = paste0(Percentage, "%")),
position = position_stack(vjust = 0.5))
# Clustered Bar Chart
clustered_bar <- ggplot(data_long, aes(x = Group, y = Value, fill = Category)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Clustered Bar Chart", x = "Group", y = "Value") +
theme_minimal() +
geom_text(aes(label = paste0(Percentage, "%")),
position = position_dodge(width = 0.9), vjust = -0.5)
# Stacked Bar Chart
stacked_bar <- ggplot(data_long, aes(x = Group, y = Value, fill = Category)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Stacked Bar Chart", x = "Group", y = "Value") +
theme_minimal() +
geom_text(aes(label = paste0(Percentage, "%")),
position = position_stack(vjust = 0.5))
# Display the plots
print(simple_bar)
print(clustered_bar)
print(stacked_bar)
renv::status()
?renv::status()
renv::restore("ggplot2")
renv::snapshot("ggplot2")
renv::restore("ggplot2")
renv::snapshot()
?renv::status()
renv::status()
# Sample dataset
data <- c(12, 15, 18, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49, 52, 55)
# Determine class intervals
class_width <- 10  # Define the width of each class interval
min_value <- min(data)
max_value <- max(data)
num_classes <- ceiling((max_value - min_value) / class_width)
class_intervals <- seq(min_value, max_value, by = class_width)
class_intervals <- cbind(class_intervals, c(class_intervals[-1] - 1, max_value))
# Create frequency distribution table
freq_table <- table(cut(data, breaks = class_intervals, include.lowest = TRUE))
# Compute class boundaries
class_boundaries <- (class_intervals[, 1] + class_intervals[, 2]) / 2
# Combine class intervals, boundaries, and frequencies into a dataframe
freq_table_df <- data.frame(Class_Interval = cut(class_boundaries, breaks = class_intervals, include.lowest = TRUE),
Class_Limit_Lower = class_intervals[, 1],
Class_Limit_Upper = class_intervals[, 2],
Class_Boundary = class_boundaries,
Frequency = as.numeric(freq_table))
# Sample data
data <- c(12, 15, 18, 22, 25, 28, 32, 35, 38, 42, 45, 48, 52, 55, 58)
# Determine class intervals (e.g., using Sturges' rule)
n <- length(data)
k <- ceiling(1 + 3.322 * log10(n))  # Number of classes according to Sturges' rule
class_width <- round((max(data) - min(data)) / k, 1)
class_intervals <- seq(min(data), max(data) + class_width, by = class_width)
# Calculate class limits
class_limits_lower <- class_intervals[-length(class_intervals)]
class_limits_upper <- class_intervals[-1]
class_limits <- paste(class_limits_lower, "-", class_limits_upper)
# Calculate class boundaries
class_boundaries_lower <- class_intervals - 0.5 * class_width
class_boundaries_upper <- class_intervals + 0.5 * class_width
class_boundaries <- paste(class_boundaries_lower, "-", class_boundaries_upper)
# Calculate frequency
frequency <- table(cut(data, breaks = class_intervals, include.lowest = TRUE))
# Create frequency distribution table
frequency_table <- data.frame(
Class_Interval = class_intervals[-length(class_intervals)],
Class_Limit = class_limits,
Class_Boundary = class_boundaries,
Frequency = as.numeric(frequency)
)
# Sample data
data <- c(12, 15, 18, 22, 25, 28, 32, 35, 38, 42, 45, 48, 52, 55, 58)
# Determine class intervals (e.g., using Sturges' rule)
n <- length(data)
k <- ceiling(1 + 3.322 * log10(n))  # Number of classes according to Sturges' rule
class_width <- round((max(data) - min(data)) / k, 1)
class_intervals <- seq(min(data), max(data) + class_width, by = class_width)
# Calculate class limits
class_limits_lower <- class_intervals[-length(class_intervals)]
class_limits_upper <- class_intervals[-1]
class_limits <- paste(class_limits_lower, "-", class_limits_upper)
# Calculate class boundaries
class_boundaries_lower <- class_intervals - 0.5 * class_width
class_boundaries_upper <- class_intervals + 0.5 * class_width
class_boundaries <- paste(class_boundaries_lower[-1], "-", class_boundaries_upper[-1])
# Calculate frequency
frequency <- table(cut(data, breaks = class_intervals, include.lowest = TRUE))
# Create frequency distribution table
frequency_table <- data.frame(
Class_Interval = class_intervals[-length(class_intervals)],
Class_Limit = class_limits,
Class_Boundary = class_boundaries,
Frequency = as.numeric(frequency)
)
# Print frequency distribution table
print(frequency_table)
# Sample dataset of exam scores
scores <- c(65, 72, 78, 83, 90, 72, 85, 92, 68, 75, 80, 88, 93, 72, 82, 95, 78, 85, 90)
# Create frequency distribution table
freq_table <- table(cut(scores, breaks = seq(60, 100, by = 5), include.lowest = TRUE))
# Transpose the frequency distribution table
transposed_freq_table <- as.data.frame(t(freq_table))
# Rename the columns
colnames(transposed_freq_table) <- c("Class_Interval", "Frequency")
# Print the transposed frequency distribution table
print(transposed_freq_table)
# Sample dataset of exam scores
scores <- c(65, 72, 78, 83, 90, 72, 85, 92, 68, 75, 80, 88, 93, 72, 82, 95, 78, 85, 90)
# Create frequency distribution table
freq_table <- table(cut(scores, breaks = seq(60, 100, by = 5), include.lowest = TRUE))
# Transpose the frequency distribution table
transposed_freq_table <- as.data.frame(t(freq_table))
# Rename the columns
colnames(transposed_freq_table) <- c("Class", "Class_Interval", "Frequency")
# Print the transposed frequency distribution table
print(transposed_freq_table)
# Sample dataset of exam scores
scores <- c(65, 72, 78, 83, 90, 72, 85, 92, 68, 75, 80, 88, 93, 72, 82, 95, 78, 85, 90)
# Create frequency distribution table
freq_table <- table(cut(scores, breaks = seq(60, 100, by = 5), include.lowest = FALSE))
# Transpose the frequency distribution table
transposed_freq_table <- as.data.frame(t(freq_table))
# Rename the columns
colnames(transposed_freq_table) <- c("Class", "Class_Interval", "Frequency")
# Print the transposed frequency distribution table
print(transposed_freq_table)
# Sample dataset of exam scores
scores <- c(65, 72, 78, 83, 90, 72, 85, 92, 68, 75, 80, 88, 93, 72, 82, 95, 78, 85, 90)
# Create frequency distribution table
freq_table <- table(cut(scores, breaks = seq(60, 100, by = 6), include.lowest = TRUE))
# Transpose the frequency distribution table
transposed_freq_table <- as.data.frame(t(freq_table))
# Rename the columns
colnames(transposed_freq_table) <- c("Class", "Class_Interval", "Frequency")
# Print the transposed frequency distribution table
print(transposed_freq_table)
renv::status()
renv::snapshot()
renv::status()
