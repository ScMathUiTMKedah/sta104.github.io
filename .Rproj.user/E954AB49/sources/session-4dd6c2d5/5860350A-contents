---
editor: 
  markdown: 
    wrap: sentence
---

# Data organization and presentation 

## Overview of Data Organization

Data organization is a crucial step in the data analysis process.
It involves structuring and arranging data in a meaningful way to facilitate analysis and interpretation.

## Importance of Effective Data Presentation

Effective data presentation is essential for conveying insights and findings to stakeholders.
Well-organized and visually appealing presentations can enhance understanding and decision-making.

To elaborate on each outline section separately in R Quarto document format, we'll break down each section, provide explanations, examples, and R code to display relevant charts or tables.
Let's start with the first section:

## Data Types and Formats

### Introduction to Data Types

Data types categorize the nature of the data we work with, defining how we interpret and analyze it.

**Examples:** - **Categorical Data:** Gender (Male/Female), Marital Status (Single/Married/Divorced), Product Categories (Electronics/Clothing/Groceries).
- **Numerical Data:** Age (continuous), Income (continuous), Number of Children (discrete).

### Data Formats

Data formats refer to the structure or arrangement of data, distinguishing between raw, summary, and aggregated data.

**Examples:** - **Raw Data:** Individual survey responses, transaction records.
- **Summary Data:** Mean income by age group, median household size by region.
- **Aggregated Data:** Total sales revenue by product category, average customer satisfaction score by month.

### R Code to Display Examples:

```{r}
# Example of categorical data
gender <- c("Male", "Female", "Male", "Male", "Female")
table(gender)

# Example of numerical data
age <- c(25, 30, 35, 40, 45)
summary(age)
```

This R code demonstrates how to display tables summarizing categorical and numerical data.

Next, we'll continue with the next section:

## Data Cleaning and Preprocessing

### Importance of Data Cleaning

Data cleaning involves identifying and correcting errors or inconsistencies in the dataset to ensure its accuracy and reliability.

**Example:** - Handling missing values: Replace missing values with the mean or median, or remove incomplete records.
- Outlier detection and treatment: Identify outliers using statistical methods (e.g., z-score) and decide whether to remove or adjust them.

### Data Cleaning Techniques

Various techniques are available for data cleaning, addressing common issues such as missing values, outliers, and data inconsistencies.

**Example:**

``` {r}
# Handling missing values
data <- c(10, NA, 20, 30, NA)
clean_data <- na.omit(data)
clean_data

# Outlier detection and treatment
z_scores <- (data - mean(data)) / sd(data)
outliers <- data[abs(z_scores) > 2]
outliers
```

This R code demonstrates how to handle missing values and detect outliers in a dataset.

Continuing to the next section:

## Data Organization Techniques

### Tabular Data

Tabular data organization involves structuring data into rows and columns, facilitating easy comprehension and analysis.

**Example:**

``` {r}
# Creating a simple data frame
data <- data.frame(
  Name = c("John", "Emily", "Michael"),
  Age = c(25, 30, 35),
  Gender = c("Male", "Female", "Male")
)
data
```

This R code creates a basic tabular data structure using a data frame.

### Hierarchical Data

Hierarchical data organization represents data in a hierarchical structure, with parent-child relationships.

**Example:**

``` {r}
# Creating a hierarchical data structure
hierarchy <- list(
  Parent = c("A", "B", "B", "C"),
  Child = c("A1", "B1", "B2", "C1")
)
hierarchy
```

This R code creates a hierarchical data structure using lists.

<!-- ### Relational Data -->

<!-- Relational data organization involves structuring data into tables with relationships between them, commonly used in relational databases. -->

<!-- **Example:** -->

<!-- ``` {r} -->
<!-- # Creating a simple relational database -->
<!-- library(DBI) -->
<!-- con <- dbConnect(RSQLite::SQLite(), ":memory:") -->
<!-- dbWriteTable(con, "Employees", data.frame(ID = 1:3, Name = c("John", "Emily", "Michael"))) -->
<!-- dbWriteTable(con, "Departments", data.frame(ID = c(1, 2), Department = c("HR", "Finance"))) -->
<!-- dbListTables(con) -->
<!-- ``` -->

<!-- This R code demonstrates how to create and manage relational tables using the DBI package. -->
